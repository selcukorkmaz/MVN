qq = qqnorm(Value, plot.it = FALSE)
Theoretical = qq$x
Sample = qq$y
}) %>%
ungroup()
qq_data
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(
Theoretical,
probs = c(0.25, 0.75),
na.rm = TRUE
),
.groups = "drop"
) %>%
group_by(Variable) %>%
reframe(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - (diff(q_sample) / diff(q_theoretical)) * q_theoretical[1],
.groups = "drop"
)
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
select(Variable, slope, intercept)
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
select(Variable, slope, intercept)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate({
qq = qqnorm(Value, plot.it = FALSE)
Theoretical = qq$x
Sample = qq$y
}) %>%
ungroup()
qq_data
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
select(Variable, slope, intercept)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
qq_data
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
select(Variable, slope, intercept)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
select(Variable, slope, intercept)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE)
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
distinct(Variable, slope, intercept)
# Step 4: Merge slope/intercept into qq_data
qq_data <- left_join(qq_data, line_params, by = "Variable")
qq_data
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)+
ggtitle(title)
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
qqnorm(iris[1:50,1])
library(MVN)
result = mvn(data = iris[-4], subset = "Species", mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_new_data = TRUE)
plot(result, "univariate", "qq")
plot(result, diagnostic = "univariate", type = "qq")
rlang::last_trace()
data <- iris[1:50, 1:3]
data <- iris[1:50, 1:3]
univariate_diagnostic_plot(data, type = "histogram")
univariate_diagnostic_plot(data, type = "qq")
df. = iris[1:50, 1:3]
head(df)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
df_long
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
qq_data
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE)
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
distinct(Variable, slope, intercept)
line_params
df
df = iris[1:50, 1:3]
head(df)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
df_long
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
qq_data
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE)
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
distinct(Variable, slope, intercept)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample_low = quantile(Sample, 0.25, na.rm = TRUE),
q_sample_high = quantile(Sample, 0.75, na.rm = TRUE),
q_theoretical_low = quantile(Theoretical, 0.25, na.rm = TRUE),
q_theoretical_high = quantile(Theoretical, 0.75, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = (q_sample_high - q_sample_low) / (q_theoretical_high - q_theoretical_low),
intercept = q_sample_low - slope * q_theoretical_low
) %>%
select(Variable, slope, intercept)
# Step 4: Merge slope/intercept into qq_data
qq_data <- left_join(qq_data, line_params, by = "Variable")
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
ncol = nrow=3
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
# Coerce input to data frame
if (is.vector(data)) {
df <- data.frame(value = data)
var_names <- deparse(substitute(data))
names(df) <- var_names
} else if (is.matrix(data) || is.data.frame(data)) {
df <- as.data.frame(data)
var_names <- if (!is.null(colnames(df)))
colnames(df)
else
paste0("V", seq_len(ncol(df)))
names(df) <- var_names
} else {
stop("Input must be a numeric vector, matrix, or data frame.")
}
# Drop non-numeric columns
is_num <- vapply(df, is.numeric, logical(1))
if (!all(is_num)) {
warning("Dropping non-numeric columns: ",
paste(names(df)[!is_num], collapse = ", "))
df <- df[, is_num, drop = FALSE]
var_names <- names(df)
}
p <- ncol(df)
if (p < 1)
stop("No numeric variables to plot.")
# Remove rows with any NA
complete_rows <- complete.cases(df)
if (sum(!complete_rows) > 0) {
warning(sprintf("Removed %d rows with missing values.", sum(!complete_rows)))
df <- df[complete_rows, , drop = FALSE]
}
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
num_vars <- ncol(df)
ncol_plot <- ceiling(sqrt(num_vars))
nrow_plot <- ceiling(num_vars / ncol_plot)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE)
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
distinct(Variable, slope, intercept)
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample_low = quantile(Sample, 0.25, na.rm = TRUE),
q_sample_high = quantile(Sample, 0.75, na.rm = TRUE),
q_theoretical_low = quantile(Theoretical, 0.25, na.rm = TRUE),
q_theoretical_high = quantile(Theoretical, 0.75, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = (q_sample_high - q_sample_low) / (q_theoretical_high - q_theoretical_low),
intercept = q_sample_low - slope * q_theoretical_low
) %>%
select(Variable, slope, intercept)
# Step 4: Merge slope/intercept into qq_data
qq_data <- left_join(qq_data, line_params, by = "Variable")
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
devtools::document()
library(MVN)
?mvn
?hw
?doornik_hansen
devtools::check(manual = TRUE, cran = TRUE, remote = TRUE, incoming = TRUE, vignettes = FALSE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
shiny::runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
library(MVN)
?mvn
summary(result, select = "mvn")
result = mvn(data = iris[-4], subset = "Species", mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_new_data = TRUE)
summary(result, select = "mvn")
summary(result, select = "univariate")
summary(result, select = "descriptives")
summary(result, select = "outliers")
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
