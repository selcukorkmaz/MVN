x = "Robust Squared Mahalanobis Distance",
y = "Chi-Square Quantile",
color = NULL, shape = NULL
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
legend.position = c(0.85, 0.15),
legend.background = element_rect(fill = "transparent"),
panel.grid.minor = element_blank()
)
}
qq_outlier_plot
chiSq <- qchisq(0.975, p)
out$Outlier <- ifelse(out$Mahalanobis.Distance > chiSq, "Outlier", "Non-outlier")
if (qqplot) {
df2 <- data.frame(
distance = mah,
chi2q = qchisq((rank(mah) - 0.5) / n, df = p),
is_outlier = factor(mah > chiSq, levels = c(FALSE, TRUE)),
label = rownames(data)
)
text_layer <- if (label && any(df2$is_outlier == "TRUE")) {
geom_text(
data = subset(df2, is_outlier == "TRUE"),
aes(label = label),
nudge_x = 0.05 * max(df2$distance),
size = 3,
color = "#D62828"
)
} else NULL
annotate_layer <- if (max(df2$distance) >= chiSq) {
annotate(
"text",
x = chiSq,
y = max(df2$chi2q) * 0.05,
label = paste0("Cut-off: ", round(chiSq, 3)),
angle = 90, vjust = -0.5, hjust = 0,
color = "#D62828", size = 3
)
} else NULL
qq_outlier_plot <- ggplot(df2, aes(x = distance, y = chi2q, color = is_outlier, shape = is_outlier)) +
geom_point(size = 3, alpha = 0.7) +
geom_vline(xintercept = chiSq, linetype = "dashed", size = 1, color = "#D62828") +
text_layer +
annotate_layer +
scale_color_manual(values = c("FALSE" = "#4C4C4C", "TRUE" = "#D62828")) +
scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 17)) +
labs(
title = main,
x = "Robust Squared Mahalanobis Distance",
y = "Chi-Square Quantile",
color = NULL, shape = NULL
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
legend.position = c(0.85, 0.15),
legend.background = element_rect(fill = "transparent"),
panel.grid.minor = element_blank()
)
}
qq_outlier_plot
df2
out
qq_outlier_plot <- ggplot(df2, aes(x = distance, y = chi2q, color = is_outlier, shape = is_outlier)) +
geom_point(size = 3, alpha = 0.7) +
geom_vline(xintercept = chiSq, linetype = "dashed", size = 1, color = "#D62828") +
text_layer +
annotate_layer +
scale_color_manual(values = c("FALSE" = "#4C4C4C", "TRUE" = "#D62828")) +
scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 17),
labels = c("Non-outlier", "Outlier")) +
labs(
title = main,
x = "Robust Squared Mahalanobis Distance",
y = "Chi-Square Quantile",
color = NULL, shape = NULL
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
legend.position = c(0.85, 0.15),
legend.background = element_rect(fill = "transparent"),
panel.grid.minor = element_blank()
)
qq_outlier_plot
qq_outlier_plot <- ggplot(df2, aes(x = distance, y = chi2q, color = is_outlier, shape = is_outlier)) +
geom_point(size = 3, alpha = 0.7) +
geom_vline(xintercept = chiSq, linetype = "dashed", size = 1, color = "#D62828") +
text_layer +
annotate_layer +
scale_color_manual(values = c("FALSE" = "#4C4C4C", "TRUE" = "#D62828"),
labels = c("Non-outlier", "Outlier")) +
scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 17),
labels = c("Non-outlier", "Outlier")) +
labs(
title = main,
x = "Robust Squared Mahalanobis Distance",
y = "Chi-Square Quantile",
color = NULL, shape = NULL
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
legend.position = c(0.85, 0.15),
legend.background = element_rect(fill = "transparent"),
panel.grid.minor = element_blank()
)
qq_outlier_plot
library(MVN)
result = mvn(
data = iris[-4],
subset = "Species",
mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_outliers = TRUE,
show_new_data = TRUE
)
devtools::document()
library(MVN)
result = mvn(
data = iris[-4],
subset = "Species",
mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_outliers = TRUE,
show_new_data = TRUE
)
library(MVN)
result = mvn(
data = iris[-4],
subset = "Species",
mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_outliers = TRUE,
show_new_data = TRUE
)
library(MVN)
result = mvn(
data = iris[-4],
subset = "Species",
mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_outliers = TRUE,
show_new_data = TRUE
)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(MVN)
result = mvn(
data = iris[-4],
subset = "Species",
mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_outliers = TRUE,
show_new_data = TRUE
)
plot.mvn(result, diagnostic = "outlier", outlier_method = "quan", interactive = TRUE)
#' @export
plot.mvn <- function(x,
diagnostic = c("multivariate", "univariate", "outlier"),
type = NULL, interactive = FALSE, outlier_method = "adj"
) {
df = x$data
diagnostic <- match.arg(diagnostic)
# ---- MULTIVARIATE PLOT ----
if (diagnostic == "multivariate") {
if (is.null(x$subset)) {
print(multivariate_diagnostic_plot(x$data, type = type))  # also needs print()
} else {
splitData <- split(x$data, x$data[[x$subset]])
splitData <- lapply(splitData, function(df) df[, names(df) != x$subset])
group_names <- names(splitData)
if(type == "qq"){
title = "Mahalanobis Q-Q plot for"
invisible(
mapply(
function(df, group) {
p <- multivariate_diagnostic_plot(df, type = type)
p <- p + ggtitle(paste(title, group))  # modify title here
print(p)
},
splitData,
group_names
)
)
}else{
if(type == "persp"){
title = "3D perspective plot for"
}
if(type == "contour"){
title = "Contour plot for"
}
invisible(
mapply(
function(df, group) {
p <- multivariate_diagnostic_plot(df, type = type)
p <- plotly::layout(p, title = list(text = paste(title, group)))
print(p)
},
splitData,
group_names
)
)
}
}
# return(invisible(NULL))  # nothing visible printed to console
}
# ---- UNIVARIATE PLOT ----
if (diagnostic == "univariate") {
if (is.null(x$subset)) {
univariate_diagnostic_plot(x$data, type = type, interactive = interactive)
} else{
splitData = split(x$data, x$data[[x$subset]])
splitData <- lapply(splitData, function(df) df[, names(df) != x$subset])
group_names <- names(splitData)
if(type == "qq"){
plot_name <- paste0(str_to_upper(type)," plots")
}
else if(type == "scatter"){
plot_name <- paste0(str_to_title(type)," plots")
}else{
plot_name <- paste0(str_to_title(type),"s")
}
invisible(
mapply(
function(df, group) {
univariate_diagnostic_plot(df, type = type, title = paste(plot_name, "for", group), interactive = interactive)
},
splitData,
group_names
)
)
}
return(invisible(NULL))  # nothing visible printed to console
}
# ---- OUTLIER PLOT ----
if (diagnostic == "outlier") {
if (outlier_method == "quan") {
title = "Chi-Square Q-Q Plot"
} else{
title = "Adjusted Chi-Square Q-Q Plot"
}
if (is.null(x$subset)) {
p <- mv_outlier(x$data, method = outlier_method, title = title, outlier = FALSE)
invisible(print(p$qq_outlier_plot))
} else {
splitData <- split(x$data, x$data[[x$subset]])
splitData <- lapply(splitData, function(df) df[, names(df) != x$subset])
group_names <- names(splitData)
invisible(
mapply(
function(df, group) {
p <- mv_outlier(df, method = outlier_method, title = paste(title, "for", group), outlier = FALSE)
if (!is.null(p$qq_outlier_plot)) print(p$qq_outlier_plot)
},
splitData,
group_names
)
)
}
# return(invisible(NULL))  # nothing visible printed to console
}
}
plot.mvn(result, diagnostic = "outlier", outlier_method = "quan", interactive = TRUE)
plot.mvn(result, diagnostic = "outlier", outlier_method = "adj", interactive = TRUE)
devtools::document()
result = mvn(data = iris[-4], subset = "Species", mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_new_data = TRUE)
result$multivariate_outliers
setwd("C:/Users/Selçuk/Downloads/fastml-tutorial")
quarto::quarto_render()
quarto::quarto_render("C:/Users/Selçuk/Downloads/fastml-tutorial")
setwd("~/GitHub/MVN/R")
devtools::document()
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
# Load MVN
library(MVN)
# Example data
df <- iris[1:50, 1:2]
# Run mvn (if not already run)
hz_result <- mvn(data = df, mvn_test = "hz", univariate_test = "AD")
# Extract univariate Anderson–Darling results
summary(hz_result, select = "uni")
# Descriptive statistics for each variable
summary(hz_result, select = "descriptive")
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
library(MVN)
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:2]
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "quan"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:3]
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "quan"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
diagnostic = "outlier"
x = out_res
interactive = F
outlier_method = "quan"
# ---- OUTLIER PLOT ----
if (diagnostic == "outlier") {
if (outlier_method == "quan") {
title = "Chi-Square Q-Q Plot"
} else{
title = "Adjusted Chi-Square Q-Q Plot"
}
if (is.null(x$subset)) {
p <- mv_outlier(x$data, method = outlier_method, title = title, outlier = FALSE)
invisible(print(p$qq_outlier_plot))
} else {
splitData <- split(x$data, x$data[[x$subset]])
splitData <- lapply(splitData, function(df) df[, names(df) != x$subset])
group_names <- names(splitData)
invisible(
mapply(
function(df, group) {
p <- mv_outlier(df, method = outlier_method, title = paste(title, "for", group), outlier = FALSE)
if (!is.null(p$qq_outlier_plot)) print(p$qq_outlier_plot)
},
splitData,
group_names
)
)
}
}
outlier_method = "adj"
# ---- OUTLIER PLOT ----
if (diagnostic == "outlier") {
if (outlier_method == "quan") {
title = "Chi-Square Q-Q Plot"
} else{
title = "Adjusted Chi-Square Q-Q Plot"
}
if (is.null(x$subset)) {
p <- mv_outlier(x$data, method = outlier_method, title = title, outlier = FALSE)
invisible(print(p$qq_outlier_plot))
} else {
splitData <- split(x$data, x$data[[x$subset]])
splitData <- lapply(splitData, function(df) df[, names(df) != x$subset])
group_names <- names(splitData)
invisible(
mapply(
function(df, group) {
p <- mv_outlier(df, method = outlier_method, title = paste(title, "for", group), outlier = FALSE)
if (!is.null(p$qq_outlier_plot)) print(p$qq_outlier_plot)
},
splitData,
group_names
)
)
}
}
plot(out_res, diagnostic = "outlier", outlier_method = "adj")
plot(out_res, diagnostic = "outlier", outlier_method = "adj")
plot(out_res, diagnostic = "outlier", outlier_method = "quan")
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier", outlier_method = "adj")
devtools::document()
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
library(MVN)
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:3]
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
x
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
library(MVN)
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:3]
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
x =out_res
outlier_method <- x$outlier_method
outlier_method
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
library(MVN)
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:3]
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "adj"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
plot(out_res, diagnostic = "outlier")
out_res
knitr::opts_chunk$set(
echo    = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center"
)
library(MVN)
# Example data: two variables from iris (Part 1 & 2)
df <- iris[1:50, 1:3]
plot(out_res, diagnostic = "outlier")
out_res <- mvn(
data = df,
mvn_test = "hz",
multivariate_outlier_method = "quan"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
out_res <- mvn(
data = df,
mvn_test = "hz"
)
summary(out_res, select = "outliers")
plot(out_res, diagnostic = "outlier")
?mvn
result = mvn(data = iris[-4], subset = "Species", mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_new_data = TRUE)
summary(result)
