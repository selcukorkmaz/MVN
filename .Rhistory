qq_data <- left_join(qq_data, line_params, by = "Variable")
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
ncol = nrow=3
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
# Coerce input to data frame
if (is.vector(data)) {
df <- data.frame(value = data)
var_names <- deparse(substitute(data))
names(df) <- var_names
} else if (is.matrix(data) || is.data.frame(data)) {
df <- as.data.frame(data)
var_names <- if (!is.null(colnames(df)))
colnames(df)
else
paste0("V", seq_len(ncol(df)))
names(df) <- var_names
} else {
stop("Input must be a numeric vector, matrix, or data frame.")
}
# Drop non-numeric columns
is_num <- vapply(df, is.numeric, logical(1))
if (!all(is_num)) {
warning("Dropping non-numeric columns: ",
paste(names(df)[!is_num], collapse = ", "))
df <- df[, is_num, drop = FALSE]
var_names <- names(df)
}
p <- ncol(df)
if (p < 1)
stop("No numeric variables to plot.")
# Remove rows with any NA
complete_rows <- complete.cases(df)
if (sum(!complete_rows) > 0) {
warning(sprintf("Removed %d rows with missing values.", sum(!complete_rows)))
df <- df[complete_rows, , drop = FALSE]
}
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
num_vars <- ncol(df)
ncol_plot <- ceiling(sqrt(num_vars))
nrow_plot <- ceiling(num_vars / ncol_plot)
# Step 1: Convert to long format
df_long <- df %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Value")
# Step 2: Compute theoretical quantiles and sample quantiles
qq_data <- df_long %>%
group_by(Variable) %>%
mutate(
qq = list(qqnorm(Value, plot.it = FALSE)),
Theoretical = qq[[1]]$x,
Sample = qq[[1]]$y
) %>%
ungroup() %>%
select(-qq)  # optional: remove the list column
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
reframe(
q_sample = quantile(Sample, probs = c(0.25, 0.75), na.rm = TRUE),
q_theoretical = quantile(Theoretical, probs = c(0.25, 0.75), na.rm = TRUE)
) %>%
mutate(
slope = diff(q_sample) / diff(q_theoretical),
intercept = q_sample[1] - slope * q_theoretical[1]
) %>%
distinct(Variable, slope, intercept)
# Step 3: Compute slope and intercept for each Q-Q line (like qqline())
line_params <- qq_data %>%
group_by(Variable) %>%
summarise(
q_sample_low = quantile(Sample, 0.25, na.rm = TRUE),
q_sample_high = quantile(Sample, 0.75, na.rm = TRUE),
q_theoretical_low = quantile(Theoretical, 0.25, na.rm = TRUE),
q_theoretical_high = quantile(Theoretical, 0.75, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
slope = (q_sample_high - q_sample_low) / (q_theoretical_high - q_theoretical_low),
intercept = q_sample_low - slope * q_theoretical_low
) %>%
select(Variable, slope, intercept)
# Step 4: Merge slope/intercept into qq_data
qq_data <- left_join(qq_data, line_params, by = "Variable")
ggplot(qq_data, aes(x = Theoretical, y = Sample)) +
geom_point(color = "#4C4C4C",
size = 1.5,
alpha = 0.7) +
geom_abline(
aes(slope = slope, intercept = intercept),
color = "#D62828",
linewidth = 0.8
) +
facet_wrap( ~ Variable,
scales = "free",
nrow = nrow_plot,
ncol = ncol_plot) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal(base_family = "sans") +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
)
)
devtools::document()
library(MVN)
?mvn
?hw
?doornik_hansen
devtools::check(manual = TRUE, cran = TRUE, remote = TRUE, incoming = TRUE, vignettes = FALSE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
shiny::runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
library(MVN)
?mvn
summary(result, select = "mvn")
result = mvn(data = iris[-4], subset = "Species", mvn_test = "hz",
univariate_test = "AD",
multivariate_outlier_method = "adj",
show_new_data = TRUE)
summary(result, select = "mvn")
summary(result, select = "univariate")
summary(result, select = "descriptives")
summary(result, select = "outliers")
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
shiny::runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app'),
runApp('mvn-shiny-app')
?MVN::mvn
runApp('mvn-shiny-app')
ns
?MVN:::summary.mvn()
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
runApp('mvn-shiny-app')
shiny::runApp('mvn-shiny-app')
devtools::document()
shiny::runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
setwd("C:/Users/Selçuk/Downloads")
library(dunn.test)
library(FSA)
# Paket yükleme
install.packages(c("dunn.test", "FSA"))
library(dunn.test)
library(FSA)
# Veriyi okuma
library(readxl)
df <- read_excel("OF.xlsx", sheet = "Sayfa1")
df
# Kruskal-Wallis testi
kruskal.test(distance ~ grup, data = df)
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
# Post hoc test (Dunn testi, Bonferroni düzeltmeli)
dunnTest(time ~ grup, data = df, method = "bonferroni")
?dunnTest
# Post hoc test (Dunn testi, Bonferroni düzeltmeli)
dunnTest(time ~ grup, data = df, method = "none")
# Post hoc test (Dunn testi, Bonferroni düzeltmeli)
dunnTest(time ~ grup, data = df, method = "none")
# Alternatif: Benjamini-Hochberg düzeltmesi
dunnTest(time ~ grup, data = df, method = "bh")
install.packages("PMCMRplus")
library(PMCMRplus)
kwAllPairsConoverTest(time ~ grup, data = df, p.adjust.method = "bonferroni")
df <- read_excel("OF.xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
kwAllPairsConoverTest(distance ~ grup, data = df, p.adjust.method = "bonferroni")
kwAllPairsConoverTest(time ~ grup, data = df, p.adjust.method = "bonferroni")
df
kwAllPairsConoverTest(time ~ grup, data = df, p.adjust.method = "bonferroni")
df$time
df$grup
kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "bonferroni")
kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
# Post hoc test (Dunn testi, Bonferroni düzeltmeli)
dunnTest(time ~ grup, data = df, method = "none")
kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
install.packages("nparcomp")
library(nparcomp)
res <- nparcomp(time ~ grup, data = df,
type = "DSCF", # Dwass–Steel–Critchlow–Fligner
alternative = "two.sided")
library(nparcomp)
res <- nparcomp(time ~ grup, data = df,
type = "DSCF", # Dwass–Steel–Critchlow–Fligner
alternative = "two.sided")
install.packages("nparcomp")
library(nparcomp)
library(readxl)
# Veri yükle
df <- read_excel("SI.xlsx", sheet = "Sayfa1")
# DSCF testi
res <- nparcomp(distance ~ grup,
data = df,
type = "DSCF",          # Dwass–Steel–Critchlow–Fligner
alternative = "two.sided")
kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
# Veriyi okuma
library(readxl)
df <- read_excel("OF.xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
# Conover testi
res = kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
res$p.value
write.table(res$p.value, quote = F, sep = "\t")
write.table(res$p.value, "OF.txt", quote = F, sep = "\t")
getwd()
df <- read_excel("EPM .xlsx", sheet = "Sayfa1")
df
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
# Conover testi
res = kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
df
df <- read_excel("OF.xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
df <- read_excel("EPM .xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
# Conover testi
res = kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
write.table(res$p.value, "EPM.txt", quote = F, sep = "\t")
df <- read_excel("FST xlsx.xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
df
?kruskal.test
df$grup
table(df$grup)
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
# Conover testi
res = kwAllPairsConoverTest(time ~ as.factor(grup), data = df, p.adjust.method = "none")
write.table(res$p.value, "FST.txt", quote = F, sep = "\t")
# Kruskal-Wallis testi
kruskal.test(time ~ grup, data = df)
df <- read_excel("SI.xlsx", sheet = "Sayfa1")
# Veriyi okuma
library(readxl)
df <- read_excel("SI.xlsx", sheet = "Sayfa1")
# Kruskal-Wallis testi
kruskal.test(distance ~ grup, data = df)
# Conover testi
res = kwAllPairsConoverTest(distance ~ as.factor(grup), data = df, p.adjust.method = "none")
write.table(res$p.value, "SI.txt", quote = F, sep = "\t")
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
runApp('~/GitHub/MVN/inst/mvn-shiny-app')
shiny::runApp('inst/mvn-shiny-app')
devtools::document()
shiny::runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
runApp('inst/mvn-shiny-app')
10*9*8*(0.5^7)*(0.5^3)
120*(0.5^7)*(0.5^3)
??summarise
?summarise
?dplyr
??dplyr
help(dplyr)
help("dplyr"")
help("dplyr"")
help("dplyr")
library(dplyr)
detach("package:dplyr", unload = TRUE)
set.seed(42)
# Diyabetik grup (n = 30)
diyabet_kansekeri <- rnorm(30, mean = 160, sd = 25)   # mg/dL
diyabet_kolesterol <- rnorm(30, mean = 220, sd = 30)  # mg/dL
# Sağlıklı grup (n = 30)
saglikli_kansekeri <- rnorm(30, mean = 95, sd = 10)
saglikli_kolesterol <- rnorm(30, mean = 180, sd = 25)
# Data frame formatında birleştirme
veri <- data.frame(
Grup = rep(c("Diyabetik", "Sağlıklı"), each = 30),
Kan_Sekeri = c(diyabet_kansekeri, saglikli_kansekeri),
Kolesterol = c(diyabet_kolesterol, saglikli_kolesterol)
)
head(veri)
set.seed(42)
# Diyabetik grup (n = 30)
diyabet_kansekeri <- rnorm(30, mean = 160, sd = 25)   # mg/dL
diyabet_kolesterol <- rnorm(30, mean = 220, sd = 30)  # mg/dL
# Sağlıklı grup (n = 30)
saglikli_kansekeri <- rnorm(30, mean = 95, sd = 10)
saglikli_kolesterol <- rnorm(30, mean = 180, sd = 25)
# Data frame formatında birleştirme
veri <- data.frame(
Grup = rep(c("Diyabetik", "Sağlıklı"), each = 30),
Kan_Sekeri = c(diyabet_kansekeri, saglikli_kansekeri),
Kolesterol = c(diyabet_kolesterol, saglikli_kolesterol)
)
head(veri)
View(veri)
View(veri)
library(dplyr)
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
.groups = "drop"
)
View(veri)
View(veri)
View(veri)
mean(veri$Kan_Sekeri)
sd(veri$Kolesterol)
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
.groups = "drop"
)
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
median_ks=median(kan_sekeri)
.groups = "drop"
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
median_ks=median(Kan_Sekeri)
.groups = "drop"
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
median_ks=median(Kan_Sekeri),
.groups = "drop"
)
veri %>%
group_by(Grup) %>%
summarise(
Ortalama_KS = mean(Kan_Sekeri),
SD_KS       = sd(Kan_Sekeri),
Ortalama_KOL = mean(Kolesterol),
SD_KOL       = sd(Kolesterol),
median_kas=median(Kan_Sekeri),
.groups = "drop"
)
??t.test
set.seed(123)          # tekrarlanabilirlik için
n <- 100
alpha <- 2
beta  <- 5
x <- rbeta(n, shape1 = alpha, shape2 = beta)
x[1:10]               # ilk 10 değeri gör
summary(x)            # özet istatistikler
alpha <- 2
beta  <- 5
curve(dbeta(x, alpha, beta), from = 0, to = 1,
lwd = 2, col = "blue", ylab = "Yoğunluk",
xlab = "x", main = "Beta(2,5) Dağılımı")
curve(dbeta(x, alpha, beta), from = 0, to = 1,
lwd = 2, col = "red", ylab = "Yoğunluk",
xlab = "x", main = "Beta(2,5) Dağılımı")
??t.test
t.test(Kan_Sekeri ~ Grup, data = veri, var.equal = FALSE)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup))
library(ggplot2)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup))
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 0.7)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 10)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.2, alpha = 0.5)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 10, alpha = 0.5)+
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 10, alpha = 0.5)+
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.5)+
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.5)+
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.7)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.7)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 100, alpha = 0.7)
0.6
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.6, alpha = 0.5)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.2, alpha = 0.5)
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.2, alpha = 0.5)+ labs(title = "Gruplara Göre Kan Şekeri Dağılımı",
y = "Kan Şekeri (mg/dL)", x = "")
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.2, alpha = 0.5)+ labs(title = "Gruplara Göre Kan Şekeri Dağılımı",
y = "Kan Şekeri (mg/dL)", x = "")++
theme_minimal()
ggplot(veri, aes(x = Grup, y = Kan_Sekeri, fill = Grup)) +  geom_boxplot(alpha = 1000)+  geom_jitter(width = 0.2, alpha = 0.5)+ labs(title = "Gruplara Göre Kan Şekeri Dağılımı",
y = "Kan Şekeri (mg/dL)", x = "")+
theme_minimal()
