xCoord <- out[out[, 3] == TRUE, 2]
yCoord <- sort(chi2q, decreasing = T)[1:length(xCoord)]
text(xCoord, yCoord, labelOutlier, pos = position,
offset = offset)
}
if (max(d) >= chiSq) {
text(chiSq - 0.2, 2, paste("Quantile: ", round(chiSq,
3)), srt = 90, pos = 3, col = "red")
}
}
newData <- out[out$Outlier %in% "FALSE", ]
ind <- sort(row.names(newData))
newData <- data[ind, ]
result <- list(out, newData)
names(result) <- c("outlier", "newData")
}
return(result)
}
uniPlot <- function (data, type = c("qqplot", "histogram", "box", "scatter"),
mfrow = NULL, ...)
{
if (!is.data.frame(data) && !is.matrix(data) && !is.numeric(data))
stop(warning("Input must be one of classes \"vector\", \"data frame\" or \"matrix\""))
# type = match.arg(type)
if (is.data.frame(data) || is.matrix(data)) {
data = data[complete.cases(data),]
data = as.data.frame(data)
if (nrow(data) < 2)
stop(warning("Too few number of observations (n < 2)."))
if (is.null(colnames(data)))
varNames = paste("Column", 1:ncol(data), sep = "")
if (!is.null(colnames(data)))
varNames = colnames(data)
if (is.null(mfrow)) {
nCol = ceiling(sqrt(ncol(data)))
nRow = ceiling(ncol(data)/nCol)
}
if (type != "box") {
if (is.null(mfrow))
par(mfrow = c(nRow, nCol))
else par(mfrow = mfrow)
}
if (type == "histogram") {
for (i in 1:ncol(data)) {
hist(data[, i], xlab = varNames[i], freq = FALSE,
main = "", ...)
x <- NULL
rm(x)
curve(dnorm(x, mean = mean(data[, i]), sd = sd(data[,
i])), col = "red", add = TRUE)
}
}
if (type == "qqplot") {
for (i in 1:ncol(data)) {
qqnorm(data[, i], main = paste("Normal Q-Q Plot (",
varNames[i], ")", sep = ""), ...)
qqline(data[, i])
}
}
if (type == "scatter") {
if (nrow(data) == 1 || ncol(data) == 1)
stop(warning("Not available for univariate input."))
plot(data, ...)
}
if (type == "box") {
warning("Box-Plots are based on standardized values (centered and scaled).")
boxplot(scale(data), names = varNames, ...)
}
}
if (is.null(ncol(data)) || is.null(nrow(data))) {
par(mfrow = c(1, 1))
data = as.numeric(data)
if (type == "histogram") {
hist(data, freq = FALSE, main = "", ...)
curve(dnorm(x, mean = mean(data), sd = sd(data)),
col = "red", add = TRUE)
}
if (type == "qqplot") {
qqnorm(data, ...)
qqline(data)
}
if (type == "box") {
boxplot(data, ...)
}
if (type == "scatter") {
stop(warning("Not available for univariate input."))
}
}
}
BoxCox <- function(data, type = c("optimal", "rounded")){
data = data[complete.cases(data),]
powerTransformation = summary(powerTransform(data))$result
if(type == "optimal"){
lambda = powerTransformation[,1]
}
if(type == "rounded"){
lambda = powerTransformation[,2]
}
for(i in 1:length(lambda)){
if(lambda[[i]] == 0){
data[i] = log(data[i])
}else{
data[i] = data[i]^lambda[[i]]
}
}
result = list(data, lambda)
return(result)
}
#' Multivariate Normality Tests
#'
#' Performs multivariate normality tests, including Marida, Royston, Henze-Zirkler, Dornik-Haansen, E-Statistics, and graphical approaches and implements multivariate outlier detection and univariate normality of marginal distributions through plots and tests, and performs multivariate Box-Cox transformation.
#'
#' @param data a numeric matrix or data frame
#' @param subset define a variable name if subset analysis is required
#' @param mvnTest select one of the MVN tests. Type \code{"mardia"} for Mardia's test, \code{"hz"} for Henze-Zirkler's test, \code{"royston"} for Royston's test, \code{"dh"} for Doornik-Hansen's test and \code{energy} for E-statistic. Default is Henze-Zirkler's test \code{"hz"}. See details for further information.
#' @param covariance this option works for \code{"mardia"} and \code{"royston"}. If \code{TRUE} covariance matrix is normalized by \code{n}, if \code{FALSE} it is normalized by \code{n-1}
#' @param tol a numeric tolerance value which isused for inversion of the covariance matrix (\code{default = 1e-25}
#' @param alpha a numeric parameter controlling the size of the subsets over which the determinant is minimized. Allowed values for the alpha are between 0.5 and 1 and the default is 0.5.
#' @param scale if \code{TRUE} scales the colums of data
#' @param desc a logical argument. If \code{TRUE} calculates descriptive statistics
#' @param transform select a transformation method to transform univariate marginal via logarithm (\code{"log"}), square root (\code{"sqrt"}) and square (\code{"square"}).
#' @param R number of bootstrap replicates for Energy test, default is 1000.
#' @param univariateTest select one of the univariate normality tests, Shapiro-Wilk (\code{"SW"}), Cramer-von Mises (\code{"CVM"}), Lilliefors (\code{"Lillie"}), Shapiro-Francia (\code{"SF"}), Anderson-Darling (\code{"AD"}). Default is Anderson-Darling (\code{"AD"}). Do not apply Shapiro-Wilk's test, if dataset includes more than 5000 cases or less than 3 cases.
#' @param univariatePlot select one of the univariate normality plots, Q-Q plot (\code{"qq"}), histogram (\code{"histogram"}), box plot (\code{"box"}), scatter (\code{"scatter"})
#' @param multivariatePlot \code{"qq"} for chi-square Q-Q plot, \code{"persp"} for perspective plot, \code{"contour"} for contour plot
#' @param multivariateOutlierMethod select multivariate outlier detection method, \code{"quan"} quantile method based on Mahalanobis distance (default) and \code{"adj"} adjusted quantile method based on Mahalanobis distance
#' @param bc if \code{TRUE} it applies Box-Cox power transformation
#' @param bcType select \code{"optimal"} or \code{"rounded"} type of Box-Cox power transformation, only applicable if \code{bc = TRUE}, default is \code{"rounded"}
#' @param showOutliers if \code{TRUE} prints multivariate outliers
#' @param showNewData if \code{TRUE} prints new data without outliers
#'
#' @return \code{multivariateNormality} corresponding multivariate normality test statistics and p-value
#' @return \code{univariateNormality} corresponding univariate normality test statistics and p-value
#' @return \code{Descriptives} Descriptive statistics
#' @return \code{multivariateOutliers} multivariate outliers
#' @return \code{newData} new data without multivariate outliers
#' @return multivariate normality plots, Q-Q, perspective or contour
#' @return chi-square Q-Q plot for multivariate outliers
#' @return univariate normality plots, Q-Q plot, histogram, box plot, scatter
#'
#'@details
#'If \code{mvnTest = "mardia"}, it calculates the Mardia's multivariate skewness and kurtosis coefficients as well as their corresponding statistical significance.
#'It can also calculate corrected version of skewness coefficient for small sample size (n< 20).
#'For multivariate normality, both p-values of skewness and kurtosis statistics should be greater than 0.05.
#'If sample size less than 20 then p.value.small should be used as significance value of skewness instead of p.value.skew.
#'If there are missing values in the data, a listwise deletion will be applied and a complete-case analysis will be performed.
#'
#'If \code{mvnTest = "hz"}, it calculates the Henze-Zirkler's multivariate normality test. The Henze-Zirkler test is based on a non-negative functional distance that measures the distance between two distribution functions. If the data is multivariate normal, the test statistic HZ is approximately lognormally distributed. It proceeds to calculate the mean, variance and smoothness parameter. Then, mean and variance are lognormalized and the p-value is estimated.
#'If there are missing values in the data, a listwise deletion will be applied and a complete-case analysis will be performed.
#'
#'If \code{mvnTest = "royston"}, it calculates the Royston's multivariate normality test. A function to generate the Shapiro-Wilk's W statistic needed to feed the Royston's H test for multivariate normality However, if kurtosis of the data greater than 3 then Shapiro-Francia test is used for leptokurtic samples else Shapiro-Wilk test is used for platykurtic samples.
#'If there are missing values in the data, a listwise deletion will be applied and a complete-case analysis will be performed. Do not apply Royston's test, if dataset includes more than 5000 cases or less than 3 cases, since it depends on Shapiro-Wilk's test.
#'
#'If \code{mvnTest = "dh"}, it calculates the Doornik-Hansen's multivariate normality test. The code is adapted from asbio package (Aho, 2017).
#'
#'#'If \code{mvnTest = "energy"}, it calculates the Energy multivariate normality test. The code is adapted from energy package (Rizzo and Szekely, 2017)i
#'
#' @author Selcuk Korkmaz, \email{selcukorkmaz@gmail.com}
#'
#' @references
#'
#'Korkmaz S, Goksuluk D, Zararsiz G. MVN: An R Package for Assessing Multivariate Normality. The R Journal. 2014 6(2):151-162. URL \url{https://journal.r-project.org/archive/2014-2/korkmaz-goksuluk-zararsiz.pdf}
#'
#'Mardia, K. V. (1970), Measures of multivariate skewnees and kurtosis with applications. Biometrika, 57(3):519-530.
#'
#'Mardia, K. V. (1974), Applications of some measures of multivariate skewness and kurtosis for testing normality and robustness studies. Sankhy A, 36:115-128.
#'
#'Henze, N. and Zirkler, B. (1990), A Class of Invariant Consistent Tests for Multivariate Normality. Commun. Statist.-Theor. Meth., 19(10): 35953618.
#'
#'Henze, N. and Wagner, Th. (1997), A New Approach to the BHEP tests for multivariate normality. Journal of Multivariate Analysis, 62:1-23.
#'
#'Royston, J.P. (1982). An Extension of Shapiro and Wilks W Test for Normality to Large Samples. Applied Statistics, 31(2):115124.
#'
#'Royston, J.P. (1983). Some Techniques for Assessing Multivariate Normality Based on the Shapiro-Wilk W. Applied Statistics, 32(2).
#'
#'Royston, J.P. (1992). Approximating the Shapiro-Wilk W-Test for non-normality. Statistics and Computing, 2:117-119.121133.
#'
#'Royston, J.P. (1995). Remark AS R94: A remark on Algorithm AS 181: The W test for normality. Applied Statistics, 44:547-551.
#'
#'Shapiro, S. and Wilk, M. (1965). An analysis of variance test for normality. Biometrika, 52:591611.
#'
#'Doornik, J.A. and Hansen, H. (2008). An Omnibus test for univariate and multivariate normality. Oxford Bulletin of Economics and Statistics 70, 927-939.
#'
#'G. J. Szekely and M. L. Rizzo (2013). Energy statistics: A class of statistics based on distances, Journal of Statistical Planning and Inference, http://dx.doi.org/10.1016/j.jspi.2013.03.018
#'
#'M. L. Rizzo and G. J. Szekely (2016). Energy Distance, WIRES Computational Statistics, Wiley, Volume 8 Issue 1, 27-38. Available online Dec., 2015, http://dx.doi.org/10.1002/wics.1375.
#'
#'G. J. Szekely and M. L. Rizzo (2017). The Energy of Data. The Annual Review of Statistics and Its Application 4:447-79. 10.1146/annurev-statistics-060116-054026
#'
#' @examples
#' result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
#'              univariateTest = "AD", univariatePlot = "histogram",
#'              multivariatePlot = "qq", multivariateOutlierMethod = "adj",
#'              showOutliers = TRUE, showNewData = TRUE)
#'
#' #### Multivariate Normality Result
#' result$multivariateNormality
#'
#' ### Univariate Normality Result
#' result$univariateNormality
#'
#' ### Descriptives
#' result$Descriptives
#'
#' ### Multivariate Outliers
#' result$multivariateOutliers
#'
#' ### New data without multivariate outliers
#' result$newData
#'
#' # Note that this function also creates univariate histograms,
#' # multivariate Q-Q plots for multivariate normality assessment
#' # and multivariate outlier detection.
#'
#' @export
#' @import magrittr
#' @import kableExtra
#' @importFrom energy mvnorm.e
#' @importFrom boot boot
#' @importFrom moments kurtosis skewness
#' @importFrom methods new
#' @importFrom nortest sf.test cvm.test lillie.test ad.test
#' @importFrom robustbase covMcd
#' @importFrom MASS kde2d
#' @importFrom mvoutlier arw
#' @importFrom psych describe
#' @importFrom car powerTransform
#' @importFrom graphics contour persp abline boxplot curve hist legend par plot text
#' @importFrom stats rnorm var median cor cov dnorm pchisq plnorm pnorm qchisq qnorm qqline qqnorm quantile sd shapiro.test complete.cases mahalanobis
#'
mvn <- function(data, subset = NULL, mvnTest = c("mardia", "hz", "royston", "dh", "energy"), covariance = TRUE, tol = 1e-25, alpha = 0.5, scale = FALSE, desc = TRUE, transform = "none", R = 1000,
univariateTest = c("SW", "CVM", "Lillie", "SF", "AD","KS"), univariatePlot = "none",  multivariatePlot = "none", multivariateOutlierMethod = "none",
bc = FALSE, bcType = "rounded", showOutliers = FALSE, showNewData = FALSE){
mvnTest <- match.arg(mvnTest)
univariateTest <- match.arg(univariateTest)
colnms = colnames(data)
if(bc && transform != "none"){
stop("Please select transform = 'none' if you apply Box-Cox transformation or select bc = FALSE and apply one of the transformation method directly, as log, sqrt and square.")
}
if(is.null(subset)){
if(bc){
result = BoxCox(data, type = bcType)
data = result[[1]]
BoxCoxPower = result[[2]]
}
if(transform == "log"){
data = apply(data,2,log)
}
if(transform == "sqrt"){
data = apply(data,2,sqrt)
}
if(transform == "square"){
data = apply(data,2,function(x){
return(x^2)
})
}
if (!(dim(data)[2] < 2 || is.null(dim(data)))){
if(mvnTest == "mardia"){
mvnResult = mardia(data, cov = covariance, tol = tol)
}
if(mvnTest == "hz"){
mvnResult = hz(data, cov = covariance, tol = tol)
}
if(mvnTest == "royston"){
mvnResult = royston(data, tol = tol)
}
if(mvnTest == "dh"){
mvnResult = dh(data)
}
if(mvnTest == "energy"){
mvnResult = energy(data, R = R)
}
if (multivariatePlot == "qq") {
n <- dim(data)[1]
p <- dim(data)[2]
if (covariance) {
S <- ((n - 1)/n) * cov(data)
}
else {
S <- cov(data)
}
dif <- scale(data, scale = FALSE)
d <- diag(dif %*% solve(S, tol = tol) %*% t(dif))
r <- rank(d)
chi2q <- qchisq((r - 0.5)/n, p)
plot(d, chi2q, pch = 19, main = "Chi-Square Q-Q Plot",
xlab = "Squared Mahalanobis Distance", ylab = "Chi-Square Quantile")
abline(0, 1, lwd = 2, col = "black")
}
if (multivariatePlot == "persp") {
mvnPlot(data, type = "persp", default = TRUE,
plotCtrl = c(perspControl(), contourControl()))
}
if (multivariatePlot == "contour") {
mvnPlot(data, type = "contour", default = TRUE,
plotCtrl = c(perspControl(), contourControl()))
}
}else{mvnResult = "No MVN result. Number of variables is less than 2!"}
if(univariateTest == "SW"){
uniResult = uniNorm(data, type = "SW")
}
if(univariateTest == "CVM"){
uniResult = uniNorm(data, type = "CVM")
}
if(univariateTest == "Lillie"){
uniResult = uniNorm(data, type = "Lillie")
}
if(univariateTest == "SF"){
uniResult = uniNorm(data, type = "SF")
}
if(univariateTest == "KS"){
uniResult = uniNorm(data, type = "KS")
}
if(univariateTest == "AD"){
uniResult = uniNorm(data, type = "AD")
}
if(desc){
descs = descriptives(data)
descs
}else{descs = NULL}
if(multivariateOutlierMethod != "none"){
if(multivariateOutlierMethod == "quan"){
main = "Chi-Square Q-Q Plot"
}else{
main = "Adjusted Chi-Square Q-Q Plot"
}
mvOutlierRes = mvOutlier(data, qqplot = TRUE, alpha = alpha, tol = tol, method = multivariateOutlierMethod, label = TRUE, position = NULL, offset = 0.5, main = main)
mvOutliers = mvOutlierRes$outlier[mvOutlierRes$outlier$Outlier == "TRUE",]
newData = mvOutlierRes$newData
}else{
mvOutliers = NULL
newData = NULL
}
if(univariatePlot != "none"){
uniPlot(data, type = univariatePlot)
}
}else{
if(bc){
sData = split(data[,!(colnames(data) %in% subset)], data[,subset])
comp <- lapply(sData, complete.cases)
clean_data <- Map(function(d,c) {d[c,]}, sData, comp)
sData <- lapply(sData, function(x) x[complete.cases(x),])
result = lapply(sData, BoxCox, type = bcType)
dataList = list()
bcList = list()
for(i in 1:length(result)){
dataList[[i]] = result[[i]][[1]]
bcList[[i]] = result[[i]][[2]]
}
data = cbind.data.frame(do.call(rbind.data.frame, dataList), data[subset][complete.cases(data),])
colnames(data) = colnms
BoxCoxPower = bcList
names(BoxCoxPower) = names(sData)
}
if(transform == "log"){
tData = apply(data[!(colnames(data) %in% subset)],2,log)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if(transform == "sqrt"){
tData = apply(data[!(colnames(data) %in% subset)],2,sqrt)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if(transform == "square"){
tData = apply(data[!(colnames(data) %in% subset)],2,function(x){
return(x^2)
})
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
name = names(splitData)
if (!(is.null(lapply(splitData, dim)[[1]]))){
if(mvnTest == "mardia"){
mvnResult = lapply(splitData, mardia, cov = covariance, tol = tol)
}
if(mvnTest == "hz"){
mvnResult = lapply(splitData, hz, cov = covariance, tol = tol)
}
if(mvnTest == "royston"){
mvnResult = lapply(splitData, royston, tol = tol)
}
if(mvnTest == "dh"){
mvnResult = lapply(splitData, dh)
}
if(mvnTest == "energy"){
mvnResult = lapply(splitData, energy, R = R)
}
}else{mvnResult = "No MVN result. Number of variables is less than 2 "}
if(univariateTest == "SW"){
uniResult = lapply(splitData, uniNorm, type = "SW")
}
if(univariateTest == "CVM"){
uniResult = lapply(splitData, uniNorm, type = "CVM")
}
if(univariateTest == "Lillie"){
uniResult = lapply(splitData, uniNorm, type = "Lillie")
}
if(univariateTest == "SF"){
uniResult = lapply(splitData, uniNorm, type = "SF")
}
if(univariateTest == "AD"){
uniResult = lapply(splitData, uniNorm, type = "AD")
}
if(desc){
descs = lapply(splitData, descriptives)
}else{descs = NULL}
if (multivariatePlot == "qq") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
n <- dim(subsetData)[1]
p <- dim(subsetData)[2]
if (covariance) {
S <- ((n - 1)/n) * cov(subsetData)
}else {
S <- cov(subsetData)
}
dif <- scale(subsetData, scale = FALSE)
d <- diag(dif %*% solve(S, tol = tol) %*% t(dif))
r <- rank(d)
chi2q <- qchisq((r - 0.5)/n, p)
plot(d, chi2q, pch = 19, main = paste0("Chi-Square Q-Q Plot for ", name[i]),
xlab = "Squared Mahalanobis Distance", ylab = "Chi-Square Quantile")
abline(0, 1, lwd = 2, col = "black")
}
}
if (multivariatePlot == "persp") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvnPlot(subsetData, type = "persp", default = TRUE,
plotCtrl = c(perspControl(), contourControl()), main = paste0("Perspective Plot for ", name[i]))
}
}
if (multivariatePlot == "contour") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvnPlot(subsetData, type = "contour", default = TRUE,
plotCtrl = c(perspControl(), contourControl()), main = paste0("Contour Plot for ", name[i]))
}
}
if(multivariateOutlierMethod != "none"){
mvOutliers = list()
newData = list()
if(multivariateOutlierMethod == "quan"){
main = paste0("Chi-Square Q-Q Plot for ", name[[i]])
}else{
main = paste0("Adjusted Chi-Square Q-Q Plot for ", name[[i]])
}
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvOutlierRes = mvOutlier(subsetData, qqplot = TRUE, alpha = alpha, tol = tol, method = multivariateOutlierMethod, label = TRUE, position = NULL, offset = 0.5, main = main)
mvOutliers[[i]] = mvOutlierRes$outlier[mvOutlierRes$outlier$Outlier == "TRUE",]
newData[[i]] = mvOutlierRes$newData
}
names(mvOutliers) = name
names(newData) = name
}else{
mvOutliers = NULL
newData = NULL
}
if(univariatePlot != "none"){
lapply(splitData, uniPlot, type = univariatePlot)
}
}
result = list(multivariateNormality = mvnResult, univariateNormality = uniResult)
if(!is.null(descs)){
result = c(result, list(Descriptives = descs))
}
if (showOutliers){
result = c(result, list(multivariateOutliers = mvOutliers))
}
if (showNewData){
result = c(result, list(newData = newData))
}
if (bc){
result = c(result, list(BoxCoxPowerTransformation = BoxCoxPower))
}
return(result)
}
mvn.lm <- function(object, test = c("SW", "CVM", "Lillie", "SF", "AD"), plot = c("qq","histogram","box","scatter"),  desc = TRUE){
test<- match.arg(test)
plot<- match.arg(plot)
data = object$residuals
if(test == "SW"){
uniResult = uniNorm(data, type = "SW")
}
if(test == "CVM"){
uniResult = uniNorm(data, type = "CVM")
}
if(test == "Lillie"){
uniResult = uniNorm(data, type = "Lillie")
}
if(test == "SF"){
uniResult = uniNorm(data, type = "SF")
}
if(test == "AD"){
uniResult = uniNorm(data, type = "AD")
}
if(desc){
descs = descriptives(data)
descs
}else{descs = NULL}
if(!is.null(descs)){
result = list(normalityResult = uniResult, descriptives = descs)
}else{
result = list(normalityResult = uniResult)
}
result
}
mvn(cbind(rnorm(100),rnorm(100),rnorm(100)),univariateTest = "KS")
mvn(cbind(rnorm(100),rnorm(100),sample(1:1000,100)),univariateTest = "KS")
